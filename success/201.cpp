class Solution {
public:
    int rangeBitwiseAnd(int left, int right) {
        
        /*
            Побитовое И между двумя различными степенями двойки это всегда ноль
            Побитовое И между степенью двойки и любым другим числом это всегда степень двойки
            Побитовое И между нулем и любым другим числом всегда ноль
            
            Таким образом, если на отрезке находятся хотя бы две степени двойки, то ответ ноль
            Если одна степень двойки, то ответ эта степень двойки
            Если нет степеней двоек, то придется честно поэлементно вычислить значение
            
            Насколько большим может быть промежуток без степеней двойки при заданных ограничениях?
            left = 2**30 + 1, right = 2**31 - 1, а это 10**9 итераций
            Про такой промежуток ничего нельзя сказать и придется вычислять честно
            
            Таким образом, нужно уметь определять количество степеней двоек на промежутке
            Это можно вычислить как количество целых чисел на промежутке [log2(left); log2(right)]
        */
        
        double l = ceil(log2(left));
        double r = floor(log2(right));
        
        if (l == r) {
            int sqr = static_cast<int>(pow(2, l));
            if (left <= sqr - 1) return 0;
            return sqr;
        }
        
        if (r - l >= 1.0) {
            return 0;
        }
        
        int result = left;
        for (unsigned i = left; i <= right; i++) {
            result = result & i;
        }
        
        return result;
    }
};