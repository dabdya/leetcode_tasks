class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        n = len(nums)
        if n < 3:
            return 0
        
        """Идея: пока дельта меджу элементами постоянна, ничего не делаем, так как
        выполняется условие об последовательной разнице. В ином случае условие нарушено,
        и нужно узнать сколько подмассивов длины >= 3 содержится в 'накопленном' массиве.
        Рассуждения были такие:
            3 -> 1
            4 -> 3
            5 -> 6
            6 -> 10
            7 -> 15
            То есть f(n) = f(n-1) + n-2
            И это лучше посчитать сейчас, чтобы потом не тратить на это дополнительное время.
        """
        dp = [0]*(n-2)
        dp[0] = 1
        for i in range(1,n-2):
            dp[i] = dp[i-1] + i+1
        
        count = 2
        result = 0
        delta = nums[1]-nums[0]
        
        for i in range(2,n):
            d = nums[i]-nums[i-1]
            if delta == d:
                """Пока сохраняется дельта ничего не делаем как и планировалось."""
                count += 1
            else:
                if count >= 3:
                    """Иначе нужно узнать сколько подмассивом длины >= 3 в 'накопленном'
                    массиве с одинаковой последовательной разницей."""
                    result += dp[count-3]
                
                """Сброс на дефолтные параметры"""
                delta = d
                count = 2
                
        if count >= 3:
            """Дельта может сохраняться всегда, поэтому это условие важно."""
            result += dp[count-3]
        return result