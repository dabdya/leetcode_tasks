class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        n = len(arr)
        dp = [0]*(n+1)
        
        for i in range(1,n+1):
            curmax = 0
            """Бежим влево от опорного элемента i, поддерживая максимум и вычисляя dp[i]"""
            for j in range(1, min(i,k)+1):
                curmax = max(curmax, arr[i-j]) # просто поддержка максимума
                dp[i] = max(dp[i], dp[i-j] + curmax*j)
                """либо старое значение с предыдущих итераций по внутреннему циклу,
                   либо новое, которое равно количеству отступленных элементов на
                   максимум от отступленных элементов плюс старое значение для подзадачи.
                   В чем подзадача? Допустим k = 3, и есть массив [1,15,7,9], тогда:
                   либо f([1,15,7]) + 9, либо f([1,5]) + max(7,9)*2, либо f([1]) + max(15,7,9)*3
                   Если k больше, идем дальше, но до min(i,k) чтобы не вылезти за пределы слева
                   База простая: f([a]) -> a"""
        
        """Функция перехода:
            f([1..n]) = max(
                        f([1..n-1] + (n-1)*1),
                        f([1..n-2] + max(n-1, n-2)*2),
                        .............................
                        f([1..n-k] + max(n-1..n-k)*k)
                    )"""
        return dp[n]
