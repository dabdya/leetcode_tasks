from queue import Queue

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        n = len(grid)
        m = len(grid[0])

        """Проинициализируем очередь тухлыми апельсинами"""
        queue = Queue()
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 2:
                    queue.put((i,j))
        
        """
            На каждой итерации будем доставать все тухлые апельсины, и добавлять в очередь
            свежих соседей. Если так можно сделать, то количество минут увеличивается на единицу.
            Иначе все свежие апельсины протухли, за исключением компонент связности в которых
            изначально не было тухлых апельсинов: на последнем шаге предусматривается такое поведение.
            
            Количество всех итераций не может превышать O(mn), поскольку не может быть больше чем
            mn тухлых апельсинов, ведь это ограничение на размер входной матрицы.
            
            Инициализаци также работает за O(mn)
            
            Проверка на свежую компаненту связности также за O(mn)
        """
        
        minutes = 0
        while queue.qsize() != 0:
            
            for _ in range(queue.qsize()):
                i,j = queue.get()

                if i-1 >= 0 and grid[i-1][j] == 1:
                    grid[i-1][j] = 2
                    queue.put((i-1,j))

                if i+1 < n and grid[i+1][j] == 1:
                    grid[i+1][j] = 2
                    queue.put((i+1,j))

                if j-1 >= 0 and grid[i][j-1] == 1:
                    grid[i][j-1] = 2
                    queue.put((i,j-1))

                if j+1 < m and grid[i][j+1] == 1:
                    grid[i][j+1] = 2
                    queue.put((i,j+1))
                    
            if queue.qsize() != 0:
                minutes += 1

        """Проверяется, что нет компоненты связности в которой только свежие апельсины.
           Если такая компонента есть, то невозможно сделать все апельсины тухлыми.
           Иначе ответ = количество итераций (минут) найденной ранее."""
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    return -1
                    
        return minutes
    
    """Итоговая временная сложность O(mn)
       Пространственная сложность O(mn)"""