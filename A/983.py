class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        n = 366
        dp = [0]*n
        travel_days = set(days)
        
        """Идея: думать назад. До i-ого дня можно путешествовать за цену P.
        А дальше, если идет день отдыха, то цена остается такая же, иначе смотрим минимум."""
        
        """Время O(n)
           Память O(n). Даже если сделать по модулю 30 это не поможет, так как в самом начале
           есть преобразование дней во множество. Без этого будет сложно узнать, является ли день
           днем для путшествия или нет. Можно пожертвовать временем и узнавать это за O(n)
           дополнительного времени на каждой итерации."""
        
        """Есть также рекурсивный подход в решении, когда используется модуль functools
           и декоратор lru_cache, но кажется это будет медленее."""
        
        for i in range(1,n):
            if i not in travel_days:
                dp[i] = dp[i-1]
            else:
                dp[i] = min(
                    dp[i-1] + costs[0],
                    dp[max(0, i-7)] + costs[1],
                    dp[max(0, i-30)] + costs[2])

        return dp[n-1]